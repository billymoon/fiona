{
  "version": 3,
  "sources": ["../process-seed/index.ts", "../xor.ts"],
  "sourcesContent": ["import xor from \"../xor.ts\";\n\ntype RawSeedType = string | number\n\nconst stringToIntegers = (str: string): number[] => str.split(\"\").map((i) => i.charCodeAt(0));\n\nconst compound = (memo: number, i: number): number => xorify(memo + i);\n\nconst xorify = (input: number): number => xor(input % 0x7fffffff).random() * 0x7fffffff;\n\nconst prepareSeed = (input: RawSeedType): number =>\n  typeof input === \"string\"\n    ? stringToIntegers(input).reduce(compound, 0)\n    : input;\n\nconst processSeed = (inputSeed: RawSeedType, path: RawSeedType[] = [123, 'abc']) =>\n  [inputSeed, ...path].map(prepareSeed).reduce(compound, 0);\n\nexport default processSeed;\n\nexport const EXPOSE_FOR_TEST = {\n  xorify,\n  prepareSeed,\n};\n", "// xorshift128 variation of https://en.wikipedia.org/wiki/Xorshift\n\ntype SeedType = number\ntype BaseSeedsType = [number, number, number, number]\n\nconst baseSeeds = [123456789, 362436069, 521288629, 88675123];\n\nconst xor = (seed: SeedType) => {\n  let [x, y, z, w] = baseSeeds;\n\n  // const random = ()=>([x,y, z, w] = [y, z, w, w ^ w >> 19 ^ x ^ x << 11 ^ (x ^ x << 11) >> 8]) && w / 0x7fffffff\n  const random = () => {\n    const t = x ^ (x << 11);\n    [x, y, z] = [y, z, w];\n    w = w ^ (w >> 19) ^ t ^ (t >> 8);\n    return w / 0x7fffffff;\n  };\n\n  // https://stackoverflow.com/q/31513168/665261\n  // const reverse = t => ([w, z, y, x] = [z, y, x, (t = w ^ z ^ z >> 19, t ^= t >> 8, t ^= t >> 16, t ^= t << 11, t ^ t << 22)]) && w / 0x7fffffff\n  const reverse = () => {\n    let t = w ^ z ^ (z >> 19);\n    t = t ^ (t >> 8);\n    t = t ^ (t >> 16);\n    t = t ^ (t << 11);\n    t = t ^ (t << 22);\n    [w, z, y] = [z, y, x];\n    x = t;\n    return w / 0x7fffffff;\n  };\n\n  const seeder = () => Math.round(random() * 1e16);\n\n  const reseed = (seed: SeedType) => {\n    [x, y, z, w] = baseSeeds.map((i) => i + seed);\n    [x, y, z, w] = [seeder(), seeder(), seeder(), seeder()];\n  };\n\n  reseed(seed);\n\n  const getState = () => [x, y, z, w];\n  const setState = (seeds: BaseSeedsType) => ([x, y, z, w] = seeds);\n\n  return {\n    random,\n    reverse,\n    reseed,\n    getState,\n    setState\n  };\n};\n\nexport default xor;\n"],
  "mappings": ";;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACKA,IAAM,YAAY,CAAC,WAAW,WAAW,WAAW;AAEpD,IAAM,MAAM,CAAC,SAAmB;AAC9B,MAAI,CAAC,GAAG,GAAG,GAAG,KAAK;AAGnB,QAAM,SAAS,MAAM;AACnB,UAAM,IAAI,IAAK,KAAK;AACpB,KAAC,GAAG,GAAG,KAAK,CAAC,GAAG,GAAG;AACnB,QAAI,IAAK,KAAK,KAAM,IAAK,KAAK;AAC9B,WAAO,IAAI;AAAA;AAKb,QAAM,UAAU,MAAM;AACpB,QAAI,IAAI,IAAI,IAAK,KAAK;AACtB,QAAI,IAAK,KAAK;AACd,QAAI,IAAK,KAAK;AACd,QAAI,IAAK,KAAK;AACd,QAAI,IAAK,KAAK;AACd,KAAC,GAAG,GAAG,KAAK,CAAC,GAAG,GAAG;AACnB,QAAI;AACJ,WAAO,IAAI;AAAA;AAGb,QAAM,SAAS,MAAM,KAAK,MAAM,WAAW;AAE3C,QAAM,SAAS,CAAC,UAAmB;AACjC,KAAC,GAAG,GAAG,GAAG,KAAK,UAAU,IAAI,CAAC,MAAM,IAAI;AACxC,KAAC,GAAG,GAAG,GAAG,KAAK,CAAC,UAAU,UAAU,UAAU;AAAA;AAGhD,SAAO;AAEP,QAAM,WAAW,MAAM,CAAC,GAAG,GAAG,GAAG;AACjC,QAAM,WAAW,CAAC,UAA0B,CAAC,GAAG,GAAG,GAAG,KAAK;AAE3D,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIJ,IAAO,cAAQ;;;ADhDf,IAAM,mBAAmB,CAAC,QAA0B,IAAI,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,WAAW;AAE1F,IAAM,WAAW,CAAC,MAAc,MAAsB,OAAO,OAAO;AAEpE,IAAM,SAAS,CAAC,UAA0B,YAAI,QAAQ,YAAY,WAAW;AAE7E,IAAM,cAAc,CAAC,UACnB,OAAO,UAAU,WACb,iBAAiB,OAAO,OAAO,UAAU,KACzC;AAEN,IAAM,cAAc,CAAC,WAAwB,OAAsB,CAAC,KAAK,WACvE,CAAC,WAAW,GAAG,MAAM,IAAI,aAAa,OAAO,UAAU;AAEzD,IAAO,uBAAQ;AAER,IAAM,kBAAkB;AAAA,EAC7B;AAAA,EACA;AAAA;",
  "names": []
}
import { fiona, consume, Sample } from "../../app";

const templateStringOutput = seeded =>
  seeded.object(
    {
      fullname: fiona.Fullname(),
      age: fiona.Number({ max: 100 })
    },
    {
      playThing: ({ data }) => (data.age < 5 ? "cuddly toys" : "friends"),
      sentences: fiona.Array({ min: 1, max: 5 }, fiona.Sentence, "\n\n    ")
    }
  );

const Section = ({ seed }) => (
  <section>
    <h3>Template String</h3>

    <p>
      An easy way to build up a long string is to use a javascript template
      literal populated from data generated by fiona.
    </p>

    <Sample
      input={`
    const data = fiona(${seed}).object({
        fullname: fiona.Fullname(),
        age: fiona.Number({ max: 100 })
      }, {
        // pass as second argument so values in first argument
        // are calculated and can be consumed
        playThing: (seeded, value) => value.age < 5 ? 'cuddly toys' : 'friends',
        sentences: fiona.Array({ min: 1, max: 5 }, fiona.Sentence, '\\n\\n')
    })

    const templateFunction = d => \`Dear \${d.fullname},

    I know you are \${d.age} years old, and like playing with \${d.playThing}.

    \${d.sentences}

    Have a nice day,

    Fiona
    x x x\`

    templateFunction(data)
    `}
      output={`
    ${(d => `Dear ${d.fullname},

    I know you are ${d.age} years old, and like playing with ${d.playThing}.

    ${d.sentences}

    Have a nice day,

    Fiona
    x x x
    `)(templateStringOutput(fiona(seed)))}`}
    />

    <div className="clearfix" />
  </section>
);

export default consume(Section);

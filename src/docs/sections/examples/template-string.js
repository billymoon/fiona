import { fiona, consume, Sample } from '../../app'

const tmeplateStringOutput = seeded => {
  return seeded.chain({
    fullname: fiona.fullname(),
    age: fiona.number({ max: 100 })
  }).chain({
    // break the chain to commit current value and reference from original `seeded` that was passed in
    playThing: () => seeded.value().age < 5 ? 'cuddly toys' : 'friends',
    sentences: fiona.array({ min: 1, max: 5 }, fiona.sentence())
  }).value()
}

const Section = ({ seed }) =>
  <section>
    <h3>Template String</h3>

    <p>An easy way to build up a long string is to use a javascript template literal populated from data generated by fiona.</p>

    <Sample input={`
    const data = fiona(${seed}).data({
      fullname: fiona.fullname(),
      age: fiona.number({ max: 100 }),
      playThing: ({ data }) => data.age < 5 ? 'cuddly toys' : 'friends',
      sentences: fiona.array({ min: 1, max: 5 }, fiona.sentence())
    })

    const templateFunction = d => \`Dear \${d.fullname},

    I know you are \${d.age} years old, and like playing with \${d.playThing}.

    \${d.sentences.join('\\n\\n')}

    Have a nice day,

    Fiona
    x x x\`

    templateFunction(data)
    `} output={`
    ${(d => `Dear ${d.fullname},

    I know you are ${d.age} years old, and like playing with ${d.playThing}.

    ${d.sentences.join('\n\n    ')}

    Have a nice day,

    Fiona
    x x x
    `)(tmeplateStringOutput(fiona(seed)))
}`} />

    <div className='clearfix' />
  </section>

export default consume(Section)

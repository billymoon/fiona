import { Sample, fiona } from '../app/'

// import Pretender from 'fetch-pretender'

// const pretender = new Pretender()

// const modelMock = seed => fiona(seed).data({
//   name: ({ seeded }) => seeded.name(),
//   color: ({ seeded }) => seeded.oneOf(['red', 'yellow', 'blue']),
//   age: ({ seeded }) => seeded.number({ max: 100 })
// })

// pretender.get('/user/:id', request => [
//   200,
//   { 'Content-Type': 'application/json' },
//   JSON.stringify(modelMock(request.params.id))
// ])

const Section = ({ seed }) =>
  <section>
    <h3>Mocking `fetch` with Pretend</h3>

    <p>Assuing some kind of setup code like this...</p>

    <Sample>{`
    var script = document.createElement('script')
    script.src = 'https://cdn.jsdelivr.net/npm/fetch-pretender@1.5.0/main.js'
    
    script.onload = function () {
      const pretender = new Pretender()

      const modelMock = seed => fiona(seed).data({
        name: ({ seeded }) => seeded.name(),
        color: ({ seeded }) => seeded.oneOf(['red', 'yellow', 'blue']),
        age: ({ seeded }) => seeded.number({ max: 100 })
      })

      pretender.get('/user/:id', request => [
        200,
        { 'Content-Type': 'application/json' },
        JSON.stringify(modelMock(request.params.id))
      ])
    }
    
    document.head.appendChild(script)
    `}</Sample>

    <p>Calls to fetch on specified routes will now be patched to return mock results generated by fiona.</p>

    <Sample input={`
    fetch('/user/${seed}').then(r => r.text()).then(console.log)
    `} output={`
    ${JSON.stringify(fiona(seed).data({
      name: ({ seeded }) => seeded.name(),
      color: ({ seeded }) => seeded.oneOf(['red', 'yellow', 'blue']),
      age: ({ seeded }) => seeded.number({ max: 100 })
    }))}
    `} />

    <div className='clearfix' />
  </section>

export default Section
